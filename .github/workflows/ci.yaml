name: Python code validation and build

on:
  push:
    branches:
      - main
  pull_request:
      types: [opened, synchronize, reopened]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    name: Static analysis

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving SonarQube relevancy of reporting
          fetch-depth: 0

      - name: Run python linter
        uses: astral-sh/ruff-action@v3
        with:
          src: examples/multi_agent_human_chat

  sonarqube-scan:
    runs-on: ubuntu-latest
    name: SonarQube scan
    needs: integration
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage results
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: examples/multi_agent_human_chat/

      - name: Run SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: examples/multi_agent_human_chat
          args: >
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

  integration:
    runs-on: gpu-runner-github-hosted
    name: Run integration tests
    permissions:
      contents: read
      packages: write
    needs: static-analysis
    env:
      # Triage agent settings
      TRIAGE_LANGUAGE_MODEL_API_BASE: http://localhost:1234/v1/
      TRIAGE_LANGUAGE_MODEL: lm_studio/gemma-3-12b-it-qat
      TRIAGE_CLASSIFIER_VERSION: v4
      TRIAGE_CLASSIFIER_V3_MODEL_NAME: fewshot_classifier_n_all
      TRIAGE_CLASSIFIER_V3_MODEL_VERSION: 1
      TRIAGE_COPRO_DATASET_SIZE: 30
      TRIAGE_COPRO_BREADTH: 5
      TRIAGE_COPRO_DEPTH: 2
      TRIAGE_TEST_DATASET_SIZE: 50

      # Policies agent settings
      POLICIES_LANGUAGE_MODEL_API_BASE: http://localhost:1234/v1/
      POLICIES_LANGUAGE_MODEL: lm_studio/gemma-3-12b-it-qat

      # Claims agent settings
      CLAIMS_LANGUAGE_MODEL_API_BASE: http://localhost:1234/v1/
      CLAIMS_LANGUAGE_MODEL: lm_studio/gemma-3-12b-it-qat

      # Billing agent settings
      BILLING_LANGUAGE_MODEL_API_BASE: http://localhost:1234/v1/
      BILLING_LANGUAGE_MODEL: lm_studio/gemma-3-12b-it-qat

      # Escalation agent settings
      ESCALATION_LANGUAGE_MODEL_API_BASE: http://localhost:1234/v1/
      ESCALATION_LANGUAGE_MODEL: lm_studio/gemma-3-12b-it-qat

      # Shared settings
      LM_STUDIO_API_BASE: http://localhost:1234/v1/
      LM_STUDIO_API_KEY: lm-studio

      # MLFlow settings
      AWS_ACCESS_KEY_ID: user
      AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_PASSWORD }}
      MLFLOW_TRACKING_URI: http://localhost:5001
      MLFLOW_S3_ENDPOINT_URL: http://localhost:9000

    steps:
      - uses: actions/checkout@v4

      - name: Start services with Docker Compose
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: |
            examples/multi_agent_human_chat/docker-compose.yml
            examples/multi_agent_human_chat/docker-compose-lmstudio.yaml

      - name: Wait for Redpanda and MinIO to be healthy
        run: |
          echo "Waiting for Redpanda and MinIO to be healthy..."
          timeout 180 bash -c '
            until [ "$(docker inspect -f {{.State.Health.Status}} redpanda)" = "healthy" ] &&
                  [ "$(docker inspect -f {{.State.Health.Status}} eggai-examples-minio-1)" = "healthy" ]; do
              echo "Waiting..."
              sleep 5
            done
          '

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up test environment
        working-directory: examples/multi_agent_human_chat
        run: |
          make setup

      - name: Run integration tests
        working-directory: examples/multi_agent_human_chat
        run: |
          make test-libraries
          make test-triage-agent
          make test-escalation-agent
          make test-policies-agent
          make test-billing-agent
          make test-claims-agent
          make test-frontend-agent
          make test-audit-agent

      - name: Dump logs on failure
        if: ${{ failure() }}
        working-directory: examples/multi_agent_human_chat
        run: docker compose logs

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: pytest-results.xml
          path: examples/multi_agent_human_chat/reports/pytest-results.xml

      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: coverage-xml
          path: examples/multi_agent_human_chat/coverage.xml

      - name: Summarize test results
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: examples/multi_agent_human_chat/reports/pytest-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results

  docker-build:
    runs-on: ubuntu-latest
    name: Build and push docker image
    permissions:
      contents: read
      packages: write
    needs: [integration, sonarqube-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Github container registry login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image_tag
        run: |
          today=$(date -d@$(git show -s --format=%ct ${{ github.sha }}) +%Y%m%d%H%M%S)
          shortSha=$(git rev-parse --short=8 ${{ github.sha }})
          echo "tag=${shortSha}-${today}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: examples/multi_agent_human_chat
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/eggai-tech/multi-agent-human-chat:${{ steps.image_tag.outputs.tag }}
