"""
Simple message flow scenario demonstrating basic EggAI agent functionality.

This test showcases:
- Agent creation and lifecycle management
- Message filtering with filter_by_message
- Event-driven message publishing (chain reactions)
- Kafka transport integration
"""

import asyncio
import uuid

import pytest

from eggai import Agent, Channel
from eggai.transport import eggai_set_default_transport, KafkaTransport


@pytest.mark.asyncio
async def test_simple_scenario(capfd):
    """
    Test a simple request-response message flow pattern.
    
    This demonstrates how an agent can:
    1. Listen for specific message types
    2. React by publishing follow-up messages
    3. Create a message chain reaction
    
    Pattern: msg1 -> triggers handler -> publishes msg2 -> triggers second handler
    """
    eggai_set_default_transport(lambda: KafkaTransport())
    
    # Create isolated test resources to prevent test interference
    test_id = uuid.uuid4().hex[:8]
    order_agent = Agent(f"order-processing-agent-{test_id}")
    order_channel = Channel(f"test-orders-{test_id}")
    
    # Track handler invocations for verification
    handler_calls = {}

    def track_handler_call(handler_name: str):
        """Helper to track how many times each handler is called."""
        handler_calls[handler_name] = handler_calls.get(handler_name, 0) + 1

    @order_agent.subscribe(
        channel=order_channel, 
        filter_by_message=lambda event: event.get("type") == "msg1"
    )
    async def handle_initial_request(event):
        """Handle initial request and trigger follow-up action."""
        track_handler_call("initial_request")
        # Simulate processing by publishing a follow-up message
        await order_channel.publish({"type": "msg2"})

    @order_agent.subscribe(
        channel=order_channel,
        filter_by_message=lambda event: event.get("type") == "msg2"
    )
    async def handle_follow_up(event):
        """Handle the follow-up message generated by the first handler."""
        track_handler_call("follow_up")

    # Execute the test scenario
    await order_agent.start()
    
    # Publish two initial requests
    await order_channel.publish({"type": "msg1"})
    await order_channel.publish({"type": "msg1"})
    
    # Allow time for message processing and chain reactions
    await asyncio.sleep(0.5)
    
    # Verify the message flow worked correctly
    # 2 initial requests should trigger 2 follow-ups (4 total handler calls)
    assert handler_calls.get("initial_request") == 2, "Should handle 2 initial requests"
    assert handler_calls.get("follow_up") == 2, "Should handle 2 follow-up messages"
    
    await order_agent.stop()
